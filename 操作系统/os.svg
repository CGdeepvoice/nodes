<svg id="kity_svg_6" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="4241" height="1830" style="background: rgb(251, 251, 251); visibility: visible;" viewBox="0 0 4241 1830"><defs id="kity_defs_7"><linearGradient id="kity_linearGradient_17" x1="0" y1="0" x2="0" y2="1"><stop id="kity_stop_18" offset="0" stop-color="rgb(255, 255, 255)"></stop><stop id="kity_stop_19" offset="1" stop-color="rgb(204, 204, 204)"></stop></linearGradient><marker id="kity_marker_2" orient="auto" refX="6" refY="0" viewBox="-7 -7 14 14" markerWidth="7" markerHeight="7" markerUnits="userSpaceOnUse"><path id="kity_path_3" fill="rgb(115, 161, 191)" stroke="none" d="M6,0A6,6,0,1,1,-6,0A6,6,0,1,1,6,0"></path></marker></defs><g id="kity_g_8"><g id="minder1" text-rendering="optimize-speed"><g id="minder_connect_group1"><path id="kity_path_31" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2452,874.5A150.5,427,0,0,1,2602.5,447.5"></path><path id="kity_path_39" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2452,874.5A150.5,428,0,0,0,2602.5,1302.5"></path><path id="kity_path_47" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2452,874.5A150.5,129,0,0,1,2301.5,1003.5"></path><path id="kity_path_55" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2672.5,447.5C2687.5,447.5,2687.5,45.5,2702.5,45.5L2756.5,45.5"></path><path id="kity_path_63" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2756.5,45.5C2771.5,45.5,2771.5,45.5,2786.5,45.5L3248.5,45.5"></path><path id="kity_path_71" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2672.5,1302.5C2687.5,1302.5,2687.5,1095.5,2702.5,1095.5L2756.5,1095.5"></path><path id="kity_path_79" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2756.5,1095.5C2771.5,1095.5,2771.5,1095.5,2786.5,1095.5L3127.5,1095.5"></path><path id="kity_path_87" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2672.5,447.5C2687.5,447.5,2687.5,201.5,2702.5,201.5L2780.5,201.5"></path><path id="kity_path_95" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2780.5,201.5C2795.5,201.5,2795.5,97.5,2810.5,97.5L2888.5,97.5"></path><path id="kity_path_103" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2780.5,201.5C2795.5,201.5,2795.5,149.5,2810.5,149.5L2888.5,149.5"></path><path id="kity_path_111" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2888.5,97.5C2903.5,97.5,2903.5,97.5,2918.5,97.5L3080.5,97.5"></path><path id="kity_path_119" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2888.5,149.5C2903.5,149.5,2903.5,149.5,2918.5,149.5L3415.5,149.5"></path><path id="kity_path_127" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2780.5,201.5C2795.5,201.5,2795.5,201.5,2810.5,201.5L2888.5,201.5"></path><path id="kity_path_135" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2888.5,201.5C2903.5,201.5,2903.5,201.5,2918.5,201.5L3056.5,201.5"></path><path id="kity_path_143" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2780.5,201.5C2795.5,201.5,2795.5,253.5,2810.5,253.5L2888.5,253.5"></path><path id="kity_path_151" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2888.5,253.5C2903.5,253.5,2903.5,253.5,2918.5,253.5L3230.5,253.5"></path><path id="kity_path_159" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2780.5,201.5C2795.5,201.5,2795.5,305.5,2810.5,305.5L2888.5,305.5"></path><path id="kity_path_167" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2888.5,305.5C2903.5,305.5,2903.5,305.5,2918.5,305.5L2996.5,305.5"></path><path id="kity_path_175" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2672.5,447.5C2687.5,447.5,2687.5,513.5,2702.5,513.5L2828.5,513.5"></path><path id="kity_path_183" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2828.5,513.5C2843.5,513.5,2843.5,357.5,2858.5,357.5L2972.5,357.5"></path><path id="kity_path_191" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2828.5,513.5C2843.5,513.5,2843.5,409.5,2858.5,409.5L2936.5,409.5"></path><path id="kity_path_199" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2828.5,513.5C2843.5,513.5,2843.5,461.5,2858.5,461.5L2912.5,461.5"></path><path id="kity_path_207" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2828.5,513.5C2843.5,513.5,2843.5,513.5,2858.5,513.5L2936.5,513.5"></path><path id="kity_path_215" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2828.5,513.5C2843.5,513.5,2843.5,565.5,2858.5,565.5L2924.5,565.5"></path><path id="kity_path_223" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2828.5,513.5C2843.5,513.5,2843.5,617.5,2858.5,617.5L2936.5,617.5"></path><path id="kity_path_231" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2828.5,513.5C2843.5,513.5,2843.5,669.5,2858.5,669.5L2962.5,669.5"></path><path id="kity_path_239" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2672.5,1302.5C2687.5,1302.5,2687.5,1199.5,2702.5,1199.5L2828.5,1199.5"></path><path id="kity_path_247" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2828.5,1199.5C2843.5,1199.5,2843.5,1147.5,2858.5,1147.5L2924.5,1147.5"></path><path id="kity_path_255" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2924.5,1147.5C2939.5,1147.5,2939.5,1147.5,2954.5,1147.5L3656.5,1147.5"></path><path id="kity_path_263" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2828.5,1199.5C2843.5,1199.5,2843.5,1199.5,2858.5,1199.5L2924.5,1199.5"></path><path id="kity_path_271" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2924.5,1199.5C2939.5,1199.5,2939.5,1199.5,2954.5,1199.5L3320.5,1199.5"></path><path id="kity_path_279" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2828.5,1199.5C2843.5,1199.5,2843.5,1251.5,2858.5,1251.5L2974.5,1251.5"></path><path id="kity_path_287" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2974.5,1251.5C2989.5,1251.5,2989.5,1251.5,3004.5,1251.5L3238.5,1251.5"></path><path id="kity_path_295" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2672.5,447.5C2687.5,447.5,2687.5,877.5,2702.5,877.5L2780.5,877.5"></path><path id="kity_path_303" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2780.5,877.5C2795.5,877.5,2795.5,721.5,2810.5,721.5L2900.5,721.5"></path><path id="kity_path_311" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2780.5,877.5C2795.5,877.5,2795.5,773.5,2810.5,773.5L2900.5,773.5"></path><path id="kity_path_319" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2780.5,877.5C2795.5,877.5,2795.5,903.5,2810.5,903.5L2912.5,903.5"></path><path id="kity_path_327" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2780.5,877.5C2795.5,877.5,2795.5,1033.5,2810.5,1033.5L2900.5,1033.5"></path><path id="kity_path_335" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2900.5,721.5C2915.5,721.5,2915.5,721.5,2930.5,721.5L3212.5,721.5"></path><path id="kity_path_343" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2900.5,773.5C2915.5,773.5,2915.5,773.5,2930.5,773.5L3260.5,773.5"></path><path id="kity_path_351" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2912.5,903.5C2927.5,903.5,2927.5,825.5,2942.5,825.5L3303.5,825.5"></path><path id="kity_path_359" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2912.5,903.5C2927.5,903.5,2927.5,877.5,2942.5,877.5L3411.5,877.5"></path><path id="kity_path_367" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2912.5,903.5C2927.5,903.5,2927.5,929.5,2942.5,929.5L3431.5,929.5"></path><path id="kity_path_375" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2912.5,903.5C2927.5,903.5,2927.5,981.5,2942.5,981.5L3641.5,981.5"></path><path id="kity_path_383" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2672.5,1302.5C2687.5,1302.5,2687.5,1329.5,2702.5,1329.5L2840.5,1329.5"></path><path id="kity_path_391" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2840.5,1329.5C2855.5,1329.5,2855.5,1303.5,2870.5,1303.5L3224.5,1303.5"></path><path id="kity_path_399" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2840.5,1329.5C2855.5,1329.5,2855.5,1355.5,2870.5,1355.5L3583.5,1355.5"></path><path id="kity_path_407" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2672.5,1302.5C2687.5,1302.5,2687.5,1537.5,2702.5,1537.5L2768.5,1537.5"></path><path id="kity_path_415" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2768.5,1537.5C2783.5,1537.5,2783.5,1433.5,2798.5,1433.5L2852.5,1433.5"></path><path id="kity_path_423" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2852.5,1433.5C2867.5,1433.5,2867.5,1407.5,2882.5,1407.5L4149.5,1407.5"></path><path id="kity_path_431" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2768.5,1537.5C2783.5,1537.5,2783.5,1537.5,2798.5,1537.5L2888.5,1537.5"></path><path id="kity_path_439" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2852.5,1433.5C2867.5,1433.5,2867.5,1459.5,2882.5,1459.5L4221.5,1459.5"></path><path id="kity_path_447" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2888.5,1537.5C2903.5,1537.5,2903.5,1511.5,2918.5,1511.5L2972.5,1511.5"></path><path id="kity_path_455" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2972.5,1511.5C2987.5,1511.5,2987.5,1511.5,3002.5,1511.5L3656.5,1511.5"></path><path id="kity_path_463" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2888.5,1537.5C2903.5,1537.5,2903.5,1563.5,2918.5,1563.5L2972.5,1563.5"></path><path id="kity_path_471" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2972.5,1563.5C2987.5,1563.5,2987.5,1563.5,3002.5,1563.5L3431.5,1563.5"></path><path id="kity_path_479" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2768.5,1537.5C2783.5,1537.5,2783.5,1641.5,2798.5,1641.5L2972.5,1641.5"></path><path id="kity_path_487" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2972.5,1641.5C2987.5,1641.5,2987.5,1641.5,3002.5,1641.5L3056.5,1641.5"></path><path id="kity_path_495" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M3056.5,1641.5C3071.5,1641.5,3071.5,1615.5,3086.5,1615.5L3596.5,1615.5"></path><path id="kity_path_503" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M3056.5,1641.5C3071.5,1641.5,3071.5,1667.5,3086.5,1667.5L3980.5,1667.5"></path><path id="kity_path_519" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2452,874.5A150.5,128,0,0,0,2301.5,746.5"></path><path id="kity_path_527" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2231.5,746.5C2216.5,746.5,2216.5,708.5,2201.5,708.5L1317.5,708.5"></path><path id="kity_path_535" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2231.5,746.5C2216.5,746.5,2216.5,760.5,2201.5,760.5L2144.5,760.5"></path><path id="kity_path_543" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2231.5,746.5C2216.5,746.5,2216.5,812.5,2201.5,812.5L2101.5,812.5"></path><path id="kity_path_551" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2203.5,1003.5C2188.5,1003.5,2188.5,874.5,2173.5,874.5L1732.5,874.5"></path><path id="kity_path_583" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2203.5,1003.5C2188.5,1003.5,2188.5,1160.5,2173.5,1160.5L2119.5,1160.5"></path><path id="kity_path_591" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2119.5,1160.5C2104.5,1160.5,2104.5,926.5,2089.5,926.5L1963.5,926.5"></path><path id="kity_path_599" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1963.5,926.5C1948.5,926.5,1948.5,926.5,1933.5,926.5L1855.5,926.5"></path><path id="kity_path_607" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2119.5,1160.5C2104.5,1160.5,2104.5,1102.5,2089.5,1102.5L1951.5,1102.5"></path><path id="kity_path_615" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1855.5,926.5C1840.5,926.5,1840.5,926.5,1825.5,926.5L1303.5,926.5"></path><path id="kity_path_623" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1951.5,1102.5C1936.5,1102.5,1936.5,1018.5,1921.5,1018.5L1843.5,1018.5"></path><path id="kity_path_631" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1951.5,1102.5C1936.5,1102.5,1936.5,1135.5,1921.5,1135.5L1843.5,1135.5"></path><path id="kity_path_639" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1951.5,1102.5C1936.5,1102.5,1936.5,1187.5,1921.5,1187.5L1831.5,1187.5"></path><path id="kity_path_647" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1843.5,1018.5C1828.5,1018.5,1828.5,979.5,1813.5,979.5L1171.5,979.5"></path><path id="kity_path_655" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1843.5,1135.5C1828.5,1135.5,1828.5,1135.5,1813.5,1135.5L667.5,1135.5"></path><path id="kity_path_663" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1831.5,1187.5C1816.5,1187.5,1816.5,1187.5,1801.5,1187.5L1315.5,1187.5"></path><path id="kity_path_671" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1843.5,1018.5C1828.5,1018.5,1828.5,1057.5,1813.5,1057.5L1699.5,1057.5"></path><path id="kity_path_679" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1699.5,1057.5C1684.5,1057.5,1684.5,1031.5,1669.5,1031.5L430.5,1031.5"></path><path id="kity_path_687" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1699.5,1057.5C1684.5,1057.5,1684.5,1083.5,1669.5,1083.5L775.5,1083.5"></path><path id="kity_path_695" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2119.5,1160.5C2104.5,1160.5,2104.5,1394.5,2089.5,1394.5L2011.5,1394.5"></path><path id="kity_path_703" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2011.5,1394.5C1996.5,1394.5,1996.5,1238.5,1981.5,1238.5L1351.5,1238.5"></path><path id="kity_path_711" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2011.5,1394.5C1996.5,1394.5,1996.5,1316.5,1981.5,1316.5L1891.5,1316.5"></path><path id="kity_path_719" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1891.5,1316.5C1876.5,1316.5,1876.5,1290.5,1861.5,1290.5L1771.5,1290.5"></path><path id="kity_path_727" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1771.5,1290.5C1756.5,1290.5,1756.5,1290.5,1741.5,1290.5L1087.5,1290.5"></path><path id="kity_path_735" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1891.5,1316.5C1876.5,1316.5,1876.5,1342.5,1861.5,1342.5L1771.5,1342.5"></path><path id="kity_path_743" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1771.5,1342.5C1756.5,1342.5,1756.5,1342.5,1741.5,1342.5L1171.5,1342.5"></path><path id="kity_path_751" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2011.5,1394.5C1996.5,1394.5,1996.5,1550.5,1981.5,1550.5L1903.5,1550.5"></path><path id="kity_path_759" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1903.5,1550.5C1888.5,1550.5,1888.5,1394.5,1873.5,1394.5L679.5,1394.5"></path><path id="kity_path_767" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1903.5,1550.5C1888.5,1550.5,1888.5,1498.5,1873.5,1498.5L1615.5,1498.5"></path><path id="kity_path_775" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1615.5,1498.5C1600.5,1498.5,1600.5,1446.5,1585.5,1446.5L1459.5,1446.5"></path><path id="kity_path_783" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1459.5,1446.5C1444.5,1446.5,1444.5,1446.5,1429.5,1446.5L20.5,1446.5"></path><path id="kity_path_791" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1615.5,1498.5C1600.5,1498.5,1600.5,1498.5,1585.5,1498.5L1459.5,1498.5"></path><path id="kity_path_799" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1459.5,1498.5C1444.5,1498.5,1444.5,1498.5,1429.5,1498.5L1015.5,1498.5"></path><path id="kity_path_807" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1615.5,1498.5C1600.5,1498.5,1600.5,1550.5,1585.5,1550.5L1447.5,1550.5"></path><path id="kity_path_815" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1903.5,1550.5C1888.5,1550.5,1888.5,1706.5,1873.5,1706.5L1795.5,1706.5"></path><path id="kity_path_823" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1795.5,1706.5C1780.5,1706.5,1780.5,1602.5,1765.5,1602.5L1640.5,1602.5"></path><path id="kity_path_831" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1640.5,1602.5C1625.5,1602.5,1625.5,1602.5,1610.5,1602.5L1028.5,1602.5"></path><path id="kity_path_839" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1795.5,1706.5C1780.5,1706.5,1780.5,1654.5,1765.5,1654.5L1687.5,1654.5"></path><path id="kity_path_847" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1687.5,1654.5C1672.5,1654.5,1672.5,1654.5,1657.5,1654.5L1519.5,1654.5"></path><path id="kity_path_855" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1795.5,1706.5C1780.5,1706.5,1780.5,1706.5,1765.5,1706.5L1654.5,1706.5"></path><path id="kity_path_863" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1795.5,1706.5C1780.5,1706.5,1780.5,1758.5,1765.5,1758.5L1663.5,1758.5"></path><path id="kity_path_871" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1795.5,1706.5C1780.5,1706.5,1780.5,1810.5,1765.5,1810.5L1663.5,1810.5"></path><path id="kity_path_879" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1663.5,1758.5C1648.5,1758.5,1648.5,1758.5,1633.5,1758.5L940.5,1758.5"></path></g><g id="minder_node1"><path id="node_outline1" fill="rgb(115, 161, 191)" stroke="rgb(115, 161, 191)" d="M2424.5,854.5h55a5,5,0,0,1,5,5v30a5,5,0,0,1,-5,5h-55a5,5,0,0,1,-5,-5v-30a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text1" fill="white"><text id="kity_text_22" text-rendering="inherit" font-size="16" dy=".8em" y="866.5" x="2443.5">os</text></g></g><g id="kity_g_12"><path id="kity_path_13" fill="none" stroke="none" d="M2443.5,874.5h0v0h0z"></path></g><g id="kity_g_14"><path id="kity_path_15" fill="none" stroke="none" d="M2443.5,874.5h0v0h0z"></path><path id="kity_path_16" fill="none" stroke="none"></path></g><g id="minder_node2"><g id="node_expander1" style="cursor: pointer;"><path id="kity_path_36" fill="white" stroke="gray" d="M2603.5,447.5A6,6,0,1,1,2591.5,447.5A6,6,0,1,1,2603.5,447.5"></path><path id="kity_path_37" fill="none" stroke="gray" d="M2593,447.5L2602,447.5"></path></g><path id="node_outline2" fill="rgb(238, 243, 246)" stroke="rgb(115, 161, 191)" d="M2607.5,434.5h62a3,3,0,0,1,3,3v20a3,3,0,0,1,-3,3h-62a3,3,0,0,1,-3,-3v-20a3,3,0,0,1,3,-3z" stroke-width="1"></path><g id="node_text2" fill="black"><text id="kity_text_33" text-rendering="inherit" font-size="14" dy=".8em" y="440.5" x="2624.5">进程</text></g></g><g id="minder_node3"><g id="node_expander2" style="cursor: pointer;"><path id="kity_path_44" fill="white" stroke="gray" d="M2603.5,1302.5A6,6,0,1,1,2591.5,1302.5A6,6,0,1,1,2603.5,1302.5"></path><path id="kity_path_45" fill="none" stroke="gray" d="M2593,1302.5L2602,1302.5"></path></g><path id="node_outline3" fill="rgb(238, 243, 246)" stroke="rgb(115, 161, 191)" d="M2607.5,1289.5h62a3,3,0,0,1,3,3v20a3,3,0,0,1,-3,3h-62a3,3,0,0,1,-3,-3v-20a3,3,0,0,1,3,-3z" stroke-width="1"></path><g id="node_text3" fill="black"><text id="kity_text_41" text-rendering="inherit" font-size="14" dy=".8em" y="1295.5" x="2624.5">线程</text></g></g><g id="minder_node4"><g id="node_expander3" style="cursor: pointer;"><path id="kity_path_52" fill="white" stroke="gray" d="M2312.5,1003.5A6,6,0,1,1,2300.5,1003.5A6,6,0,1,1,2312.5,1003.5"></path><path id="kity_path_53" fill="none" stroke="gray" d="M2302,1003.5L2311,1003.5"></path></g><path id="node_outline4" fill="rgb(238, 243, 246)" stroke="rgb(115, 161, 191)" d="M2206.5,990.5h90a3,3,0,0,1,3,3v20a3,3,0,0,1,-3,3h-90a3,3,0,0,1,-3,-3v-20a3,3,0,0,1,3,-3z" stroke-width="1"></path><g id="node_text4" fill="black"><text id="kity_text_49" text-rendering="inherit" font-size="14" dy=".8em" y="996.5" x="2223.5">内存管理</text></g></g><g id="minder_node5"><g id="node_expander4" style="cursor: pointer;"><path id="kity_path_60" fill="white" stroke="gray" d="M2712.5,31.5A6,6,0,1,1,2700.5,31.5A6,6,0,1,1,2712.5,31.5"></path><path id="kity_path_61" fill="none" stroke="gray" d="M2702,31.5L2711,31.5"></path></g><path id="node_outline5" fill="none" stroke="none" d="M2717.5,20.5h34a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-34a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text5" fill="black"><text id="kity_text_57" text-rendering="inherit" font-size="12" dy=".8em" y="25.5" x="2722.5">定义</text></g></g><g id="minder_node6"><g id="node_expander5" style="cursor: pointer;" display="none"><path id="kity_path_68" fill="white" stroke="gray" d="M2796.5,31.5A6,6,0,1,1,2784.5,31.5A6,6,0,1,1,2796.5,31.5"></path><path id="kity_path_69" fill="none" stroke="gray"></path></g><path id="node_outline6" fill="none" stroke="none" d="M2801.5,20.5h442a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-442a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text6" fill="black"><text id="kity_text_65" text-rendering="inherit" font-size="12" dy=".8em" y="25.5" x="2806.5">应用程序运行的单位，每个应用程序都是一个进程，进程是资源调度的最小单位。</text></g></g><g id="minder_node7"><g id="node_expander6" style="cursor: pointer;"><path id="kity_path_76" fill="white" stroke="gray" d="M2712.5,1081.5A6,6,0,1,1,2700.5,1081.5A6,6,0,1,1,2712.5,1081.5"></path><path id="kity_path_77" fill="none" stroke="gray" d="M2702,1081.5L2711,1081.5"></path></g><path id="node_outline7" fill="none" stroke="none" d="M2717.5,1070.5h34a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-34a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text7" fill="black"><text id="kity_text_73" text-rendering="inherit" font-size="12" dy=".8em" y="1075.5" x="2722.5">定义</text></g></g><g id="minder_node8"><g id="node_expander7" style="cursor: pointer;" display="none"><path id="kity_path_84" fill="white" stroke="gray" d="M2796.5,1081.5A6,6,0,1,1,2784.5,1081.5A6,6,0,1,1,2796.5,1081.5"></path><path id="kity_path_85" fill="none" stroke="gray"></path></g><path id="node_outline8" fill="none" stroke="none" d="M2801.5,1070.5h321a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-321a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text8" fill="black"><text id="kity_text_81" text-rendering="inherit" font-size="12" dy=".8em" y="1075.5" x="2806.5">线程是进程划分的更小的运行单位，是cpu调度的最小单位</text></g></g><g id="minder_node9"><g id="node_expander8" style="cursor: pointer;"><path id="kity_path_92" fill="white" stroke="gray" d="M2712.5,187.5A6,6,0,1,1,2700.5,187.5A6,6,0,1,1,2712.5,187.5"></path><path id="kity_path_93" fill="none" stroke="gray" d="M2702,187.5L2711,187.5"></path></g><path id="node_outline9" fill="none" stroke="none" d="M2717.5,176.5h58a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-58a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text9" fill="black"><text id="kity_text_89" text-rendering="inherit" font-size="12" dy=".8em" y="181.5" x="2722.5">声明周期</text></g></g><g id="minder_node10"><g id="node_expander9" style="cursor: pointer;"><path id="kity_path_100" fill="white" stroke="gray" d="M2820.5,83.5A6,6,0,1,1,2808.5,83.5A6,6,0,1,1,2820.5,83.5"></path><path id="kity_path_101" fill="none" stroke="gray" d="M2810,83.5L2819,83.5"></path></g><path id="node_outline10" fill="none" stroke="none" d="M2825.5,72.5h58a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-58a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text10" fill="black"><text id="kity_text_97" text-rendering="inherit" font-size="12" dy=".8em" y="77.5" x="2830.5">创建状态</text></g></g><g id="minder_node11"><g id="node_expander10" style="cursor: pointer;"><path id="kity_path_108" fill="white" stroke="gray" d="M2820.5,135.5A6,6,0,1,1,2808.5,135.5A6,6,0,1,1,2820.5,135.5"></path><path id="kity_path_109" fill="none" stroke="gray" d="M2810,135.5L2819,135.5"></path></g><path id="node_outline11" fill="none" stroke="none" d="M2825.5,124.5h58a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-58a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text11" fill="black"><text id="kity_text_105" text-rendering="inherit" font-size="12" dy=".8em" y="129.5" x="2830.5">就绪状态</text></g></g><g id="minder_node12"><g id="node_expander11" style="cursor: pointer;" display="none"><path id="kity_path_116" fill="white" stroke="gray" d="M2928.5,83.5A6,6,0,1,1,2916.5,83.5A6,6,0,1,1,2928.5,83.5"></path><path id="kity_path_117" fill="none" stroke="gray"></path></g><path id="node_outline12" fill="none" stroke="none" d="M2933.5,72.5h142a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-142a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text12" fill="black"><text id="kity_text_113" text-rendering="inherit" font-size="12" dy=".8em" y="77.5" x="2938.5">正在创建进程，申请资源</text></g></g><g id="minder_node13"><g id="node_expander12" style="cursor: pointer;" display="none"><path id="kity_path_124" fill="white" stroke="gray" d="M2928.5,135.5A6,6,0,1,1,2916.5,135.5A6,6,0,1,1,2928.5,135.5"></path><path id="kity_path_125" fill="none" stroke="gray"></path></g><path id="node_outline13" fill="none" stroke="none" d="M2933.5,124.5h477a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-477a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text13" fill="black"><text id="kity_text_121" text-rendering="inherit" font-size="12" dy=".8em" y="129.5" x="2938.5">进程处于准备运行状态，获得了除cpu外的所有所需的资源。获得cpu调度就可以执行。</text></g></g><g id="minder_node14"><g id="node_expander13" style="cursor: pointer;"><path id="kity_path_132" fill="white" stroke="gray" d="M2820.5,187.5A6,6,0,1,1,2808.5,187.5A6,6,0,1,1,2820.5,187.5"></path><path id="kity_path_133" fill="none" stroke="gray" d="M2810,187.5L2819,187.5"></path></g><path id="node_outline14" fill="none" stroke="none" d="M2825.5,176.5h58a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-58a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text14" fill="black"><text id="kity_text_129" text-rendering="inherit" font-size="12" dy=".8em" y="181.5" x="2830.5">运行状态</text></g></g><g id="minder_node15"><g id="node_expander14" style="cursor: pointer;" display="none"><path id="kity_path_140" fill="white" stroke="gray" d="M2928.5,187.5A6,6,0,1,1,2916.5,187.5A6,6,0,1,1,2928.5,187.5"></path><path id="kity_path_141" fill="none" stroke="gray"></path></g><path id="node_outline15" fill="none" stroke="none" d="M2933.5,176.5h118a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-118a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text15" fill="black"><text id="kity_text_137" text-rendering="inherit" font-size="12" dy=".8em" y="181.5" x="2938.5">进程在处理器上运行</text></g></g><g id="minder_node16"><g id="node_expander15" style="cursor: pointer;"><path id="kity_path_148" fill="white" stroke="gray" d="M2820.5,239.5A6,6,0,1,1,2808.5,239.5A6,6,0,1,1,2820.5,239.5"></path><path id="kity_path_149" fill="none" stroke="gray" d="M2810,239.5L2819,239.5"></path></g><path id="node_outline16" fill="none" stroke="none" d="M2825.5,228.5h58a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-58a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text16" fill="black"><text id="kity_text_145" text-rendering="inherit" font-size="12" dy=".8em" y="233.5" x="2830.5">阻塞状态</text></g></g><g id="minder_node17"><g id="node_expander16" style="cursor: pointer;" display="none"><path id="kity_path_156" fill="white" stroke="gray" d="M2928.5,239.5A6,6,0,1,1,2916.5,239.5A6,6,0,1,1,2928.5,239.5"></path><path id="kity_path_157" fill="none" stroke="gray"></path></g><path id="node_outline17" fill="none" stroke="none" d="M2933.5,228.5h292a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-292a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text17" fill="black"><text id="kity_text_153" text-rendering="inherit" font-size="12" dy=".8em" y="233.5" x="2938.5">进程因为某些原因终止运行，如等待资源或者等待I/O</text></g></g><g id="minder_node18"><g id="node_expander17" style="cursor: pointer;"><path id="kity_path_164" fill="white" stroke="gray" d="M2820.5,291.5A6,6,0,1,1,2808.5,291.5A6,6,0,1,1,2820.5,291.5"></path><path id="kity_path_165" fill="none" stroke="gray" d="M2810,291.5L2819,291.5"></path></g><path id="node_outline18" fill="none" stroke="none" d="M2825.5,280.5h58a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-58a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text18" fill="black"><text id="kity_text_161" text-rendering="inherit" font-size="12" dy=".8em" y="285.5" x="2830.5">结束状态</text></g></g><g id="minder_node19"><g id="node_expander18" style="cursor: pointer;" display="none"><path id="kity_path_172" fill="white" stroke="gray" d="M2928.5,291.5A6,6,0,1,1,2916.5,291.5A6,6,0,1,1,2928.5,291.5"></path><path id="kity_path_173" fill="none" stroke="gray"></path></g><path id="node_outline19" fill="none" stroke="none" d="M2933.5,280.5h58a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-58a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text19" fill="black"><text id="kity_text_169" text-rendering="inherit" font-size="12" dy=".8em" y="285.5" x="2938.5">运行结束</text></g></g><g id="minder_node20"><g id="node_expander19" style="cursor: pointer;"><path id="kity_path_180" fill="white" stroke="gray" d="M2712.5,499.5A6,6,0,1,1,2700.5,499.5A6,6,0,1,1,2712.5,499.5"></path><path id="kity_path_181" fill="none" stroke="gray" d="M2702,499.5L2711,499.5"></path></g><path id="node_outline20" fill="none" stroke="none" d="M2717.5,488.5h106a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-106a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text20" fill="black"><text id="kity_text_177" text-rendering="inherit" font-size="12" dy=".8em" y="493.5" x="2722.5">进程间的通信方式</text></g></g><g id="minder_node21"><g id="node_expander20" style="cursor: pointer;" display="none"><path id="kity_path_188" fill="white" stroke="gray" d="M2868.5,343.5A6,6,0,1,1,2856.5,343.5A6,6,0,1,1,2868.5,343.5"></path><path id="kity_path_189" fill="none" stroke="gray"></path></g><path id="node_outline21" fill="none" stroke="none" d="M2873.5,332.5h94a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-94a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text21" fill="black"><text id="kity_text_185" text-rendering="inherit" font-size="12" dy=".8em" y="337.5" x="2878.5">管道，匿名管道</text></g></g><g id="minder_node22"><g id="node_expander21" style="cursor: pointer;" display="none"><path id="kity_path_196" fill="white" stroke="gray" d="M2868.5,395.5A6,6,0,1,1,2856.5,395.5A6,6,0,1,1,2868.5,395.5"></path><path id="kity_path_197" fill="none" stroke="gray"></path></g><path id="node_outline22" fill="none" stroke="none" d="M2873.5,384.5h58a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-58a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text22" fill="black"><text id="kity_text_193" text-rendering="inherit" font-size="12" dy=".8em" y="389.5" x="2878.5">有名管道</text></g></g><g id="minder_node23"><g id="node_expander22" style="cursor: pointer;" display="none"><path id="kity_path_204" fill="white" stroke="gray" d="M2868.5,447.5A6,6,0,1,1,2856.5,447.5A6,6,0,1,1,2868.5,447.5"></path><path id="kity_path_205" fill="none" stroke="gray"></path></g><path id="node_outline23" fill="none" stroke="none" d="M2873.5,436.5h34a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-34a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text23" fill="black"><text id="kity_text_201" text-rendering="inherit" font-size="12" dy=".8em" y="441.5" x="2878.5">信号</text></g></g><g id="minder_node24"><g id="node_expander23" style="cursor: pointer;" display="none"><path id="kity_path_212" fill="white" stroke="gray" d="M2868.5,499.5A6,6,0,1,1,2856.5,499.5A6,6,0,1,1,2868.5,499.5"></path><path id="kity_path_213" fill="none" stroke="gray"></path></g><path id="node_outline24" fill="none" stroke="none" d="M2873.5,488.5h58a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-58a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text24" fill="black"><text id="kity_text_209" text-rendering="inherit" font-size="12" dy=".8em" y="493.5" x="2878.5">消息队列</text></g></g><g id="minder_node25"><g id="node_expander24" style="cursor: pointer;" display="none"><path id="kity_path_220" fill="white" stroke="gray" d="M2868.5,551.5A6,6,0,1,1,2856.5,551.5A6,6,0,1,1,2868.5,551.5"></path><path id="kity_path_221" fill="none" stroke="gray"></path></g><path id="node_outline25" fill="none" stroke="none" d="M2873.5,540.5h46a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-46a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text25" fill="black"><text id="kity_text_217" text-rendering="inherit" font-size="12" dy=".8em" y="545.5" x="2878.5">信号量</text></g></g><g id="minder_node26"><g id="node_expander25" style="cursor: pointer;" display="none"><path id="kity_path_228" fill="white" stroke="gray" d="M2868.5,603.5A6,6,0,1,1,2856.5,603.5A6,6,0,1,1,2868.5,603.5"></path><path id="kity_path_229" fill="none" stroke="gray"></path></g><path id="node_outline26" fill="none" stroke="none" d="M2873.5,592.5h58a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-58a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text26" fill="black"><text id="kity_text_225" text-rendering="inherit" font-size="12" dy=".8em" y="597.5" x="2878.5">共享内存</text></g></g><g id="minder_node27"><g id="node_expander26" style="cursor: pointer;" display="none"><path id="kity_path_236" fill="white" stroke="gray" d="M2868.5,655.5A6,6,0,1,1,2856.5,655.5A6,6,0,1,1,2868.5,655.5"></path><path id="kity_path_237" fill="none" stroke="gray"></path></g><path id="node_outline27" fill="none" stroke="none" d="M2873.5,644.5h84a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-84a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text27" fill="black"><text id="kity_text_233" text-rendering="inherit" font-size="12" dy=".8em" y="649.5" x="2878.5">套接字socket</text></g></g><g id="minder_node28"><g id="node_expander27" style="cursor: pointer;"><path id="kity_path_244" fill="white" stroke="gray" d="M2712.5,1185.5A6,6,0,1,1,2700.5,1185.5A6,6,0,1,1,2712.5,1185.5"></path><path id="kity_path_245" fill="none" stroke="gray" d="M2702,1185.5L2711,1185.5"></path></g><path id="node_outline28" fill="none" stroke="none" d="M2717.5,1174.5h106a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-106a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text28" fill="black"><text id="kity_text_241" text-rendering="inherit" font-size="12" dy=".8em" y="1179.5" x="2722.5">线程间同步的方式</text></g></g><g id="minder_node29"><g id="node_expander28" style="cursor: pointer;"><path id="kity_path_252" fill="white" stroke="gray" d="M2868.5,1133.5A6,6,0,1,1,2856.5,1133.5A6,6,0,1,1,2868.5,1133.5"></path><path id="kity_path_253" fill="none" stroke="gray" d="M2858,1133.5L2867,1133.5"></path></g><path id="node_outline29" fill="none" stroke="none" d="M2873.5,1122.5h46a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-46a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text29" fill="black"><text id="kity_text_249" text-rendering="inherit" font-size="12" dy=".8em" y="1127.5" x="2878.5">互斥量</text></g></g><g id="minder_node30"><g id="node_expander29" style="cursor: pointer;" display="none"><path id="kity_path_260" fill="white" stroke="gray" d="M2964.5,1133.5A6,6,0,1,1,2952.5,1133.5A6,6,0,1,1,2964.5,1133.5"></path><path id="kity_path_261" fill="none" stroke="gray"></path></g><path id="node_outline30" fill="none" stroke="none" d="M2969.5,1122.5h682a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-682a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text30" fill="black"><text id="kity_text_257" text-rendering="inherit" font-size="12" dy=".8em" y="1127.5" x="2974.5">采用互斥对象机制，只有拥有互斥对象的资源才能访问公共资源。可以在多线程情况下使用，保证公共资源不会被多个线程访问</text></g></g><g id="minder_node31"><g id="node_expander30" style="cursor: pointer;"><path id="kity_path_268" fill="white" stroke="gray" d="M2868.5,1185.5A6,6,0,1,1,2856.5,1185.5A6,6,0,1,1,2868.5,1185.5"></path><path id="kity_path_269" fill="none" stroke="gray" d="M2858,1185.5L2867,1185.5"></path></g><path id="node_outline31" fill="none" stroke="none" d="M2873.5,1174.5h46a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-46a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text31" fill="black"><text id="kity_text_265" text-rendering="inherit" font-size="12" dy=".8em" y="1179.5" x="2878.5">信号量</text></g></g><g id="minder_node32"><g id="node_expander31" style="cursor: pointer;" display="none"><path id="kity_path_276" fill="white" stroke="gray" d="M2964.5,1185.5A6,6,0,1,1,2952.5,1185.5A6,6,0,1,1,2964.5,1185.5"></path><path id="kity_path_277" fill="none" stroke="gray"></path></g><path id="node_outline32" fill="none" stroke="none" d="M2969.5,1174.5h346a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-346a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text32" fill="black"><text id="kity_text_273" text-rendering="inherit" font-size="12" dy=".8em" y="1179.5" x="2974.5">允许同一个时刻多个线程访问同一资源，但是控制最大的线程数</text></g></g><g id="minder_node33"><g id="node_expander32" style="cursor: pointer;"><path id="kity_path_284" fill="white" stroke="gray" d="M2868.5,1237.5A6,6,0,1,1,2856.5,1237.5A6,6,0,1,1,2868.5,1237.5"></path><path id="kity_path_285" fill="none" stroke="gray" d="M2858,1237.5L2867,1237.5"></path></g><path id="node_outline33" fill="none" stroke="none" d="M2873.5,1226.5h96a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-96a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text33" fill="black"><text id="kity_text_281" text-rendering="inherit" font-size="12" dy=".8em" y="1231.5" x="2878.5">事件wait/notify</text></g></g><g id="minder_node34"><g id="node_expander33" style="cursor: pointer;" display="none"><path id="kity_path_292" fill="white" stroke="gray" d="M3014.5,1237.5A6,6,0,1,1,3002.5,1237.5A6,6,0,1,1,3014.5,1237.5"></path><path id="kity_path_293" fill="none" stroke="gray"></path></g><path id="node_outline34" fill="none" stroke="none" d="M3019.5,1226.5h214a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-214a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text34" fill="black"><text id="kity_text_289" text-rendering="inherit" font-size="12" dy=".8em" y="1231.5" x="3024.5">使用通知操作的方式来保持多线程同步</text></g></g><g id="minder_node35"><g id="node_expander34" style="cursor: pointer;"><path id="kity_path_300" fill="white" stroke="gray" d="M2712.5,863.5A6,6,0,1,1,2700.5,863.5A6,6,0,1,1,2712.5,863.5"></path><path id="kity_path_301" fill="none" stroke="gray" d="M2702,863.5L2711,863.5"></path></g><path id="node_outline35" fill="none" stroke="none" d="M2717.5,852.5h58a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-58a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text35" fill="black"><text id="kity_text_297" text-rendering="inherit" font-size="12" dy=".8em" y="857.5" x="2722.5">调度方式</text></g></g><g id="minder_node36"><g id="node_expander35" style="cursor: pointer;"><path id="kity_path_308" fill="white" stroke="gray" d="M2820.5,707.5A6,6,0,1,1,2808.5,707.5A6,6,0,1,1,2820.5,707.5"></path><path id="kity_path_309" fill="none" stroke="gray" d="M2810,707.5L2819,707.5"></path></g><path id="node_outline36" fill="none" stroke="none" d="M2825.5,696.5h70a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-70a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text36" fill="black"><text id="kity_text_305" text-rendering="inherit" font-size="12" dy=".8em" y="701.5" x="2830.5">先到先服务</text></g></g><g id="minder_node37"><g id="node_expander36" style="cursor: pointer;"><path id="kity_path_316" fill="white" stroke="gray" d="M2820.5,759.5A6,6,0,1,1,2808.5,759.5A6,6,0,1,1,2820.5,759.5"></path><path id="kity_path_317" fill="none" stroke="gray" d="M2810,759.5L2819,759.5"></path></g><path id="node_outline37" fill="none" stroke="none" d="M2825.5,748.5h70a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-70a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text37" fill="black"><text id="kity_text_313" text-rendering="inherit" font-size="12" dy=".8em" y="753.5" x="2830.5">短作业优先</text></g></g><g id="minder_node38"><g id="node_expander37" style="cursor: pointer;"><path id="kity_path_324" fill="white" stroke="gray" d="M2820.5,889.5A6,6,0,1,1,2808.5,889.5A6,6,0,1,1,2820.5,889.5"></path><path id="kity_path_325" fill="none" stroke="gray" d="M2810,889.5L2819,889.5"></path></g><path id="node_outline38" fill="none" stroke="none" d="M2825.5,878.5h82a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-82a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text38" fill="black"><text id="kity_text_321" text-rendering="inherit" font-size="12" dy=".8em" y="883.5" x="2830.5">多级反馈队列</text></g></g><g id="minder_node39"><g id="node_expander38" style="cursor: pointer;" display="none"><path id="kity_path_332" fill="white" stroke="gray" d="M2820.5,1019.5A6,6,0,1,1,2808.5,1019.5A6,6,0,1,1,2820.5,1019.5"></path><path id="kity_path_333" fill="none" stroke="gray"></path></g><path id="node_outline39" fill="none" stroke="none" d="M2825.5,1008.5h70a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-70a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text39" fill="black"><text id="kity_text_329" text-rendering="inherit" font-size="12" dy=".8em" y="1013.5" x="2830.5">优先级队列</text></g></g><g id="minder_node40"><g id="node_expander39" style="cursor: pointer;" display="none"><path id="kity_path_340" fill="white" stroke="gray" d="M2940.5,707.5A6,6,0,1,1,2928.5,707.5A6,6,0,1,1,2940.5,707.5"></path><path id="kity_path_341" fill="none" stroke="gray"></path></g><path id="node_outline40" fill="none" stroke="none" d="M2945.5,696.5h262a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-262a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text40" fill="black"><text id="kity_text_337" text-rendering="inherit" font-size="12" dy=".8em" y="701.5" x="2950.5">在就绪队列中选出最先进入队列的进行执行调度</text></g></g><g id="minder_node41"><g id="node_expander40" style="cursor: pointer;" display="none"><path id="kity_path_348" fill="white" stroke="gray" d="M2940.5,759.5A6,6,0,1,1,2928.5,759.5A6,6,0,1,1,2940.5,759.5"></path><path id="kity_path_349" fill="none" stroke="gray"></path></g><path id="node_outline41" fill="none" stroke="none" d="M2945.5,748.5h310a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-310a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text41" fill="black"><text id="kity_text_345" text-rendering="inherit" font-size="12" dy=".8em" y="753.5" x="2950.5">在就绪队列中选出估计运行时间最短的一个进程进行调度</text></g></g><g id="minder_node42"><g id="node_expander41" style="cursor: pointer;" display="none"><path id="kity_path_356" fill="white" stroke="gray" d="M2952.5,811.5A6,6,0,1,1,2940.5,811.5A6,6,0,1,1,2952.5,811.5"></path><path id="kity_path_357" fill="none" stroke="gray"></path></g><path id="node_outline42" fill="none" stroke="none" d="M2957.5,800.5h341a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-341a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text42" fill="black"><text id="kity_text_353" text-rendering="inherit" font-size="12" dy=".8em" y="805.5" x="2962.5">设有N个队列（Q1,Q2,QN），其中的优先级是Q1&gt;Q1&gt;..&gt;QN</text></g></g><g id="minder_node43"><g id="node_expander42" style="cursor: pointer;" display="none"><path id="kity_path_364" fill="white" stroke="gray" d="M2952.5,863.5A6,6,0,1,1,2940.5,863.5A6,6,0,1,1,2952.5,863.5"></path><path id="kity_path_365" fill="none" stroke="gray"></path></g><path id="node_outline43" fill="none" stroke="none" d="M2957.5,852.5h449a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-449a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text43" fill="black"><text id="kity_text_361" text-rendering="inherit" font-size="12" dy=".8em" y="857.5" x="2962.5">除了QN之外都采取先到先服务。每个队列的事件片不同，优先级越高时间片越少。</text></g></g><g id="minder_node44"><g id="node_expander43" style="cursor: pointer;" display="none"><path id="kity_path_372" fill="white" stroke="gray" d="M2952.5,915.5A6,6,0,1,1,2940.5,915.5A6,6,0,1,1,2952.5,915.5"></path><path id="kity_path_373" fill="none" stroke="gray"></path></g><path id="node_outline44" fill="none" stroke="none" d="M2957.5,904.5h469a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-469a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text44" fill="black"><text id="kity_text_369" text-rendering="inherit" font-size="12" dy=".8em" y="909.5" x="2962.5">当一个任务在对应队列的时间片内没有完成，就进入下一个队列，QN则进入QN尾部。</text></g></g><g id="minder_node45"><g id="node_expander44" style="cursor: pointer;" display="none"><path id="kity_path_380" fill="white" stroke="gray" d="M2952.5,967.5A6,6,0,1,1,2940.5,967.5A6,6,0,1,1,2952.5,967.5"></path><path id="kity_path_381" fill="none" stroke="gray"></path></g><path id="node_outline45" fill="none" stroke="none" d="M2957.5,956.5h679a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-679a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text45" fill="black"><text id="kity_text_377" text-rendering="inherit" font-size="12" dy=".8em" y="961.5" x="2962.5">这样当一个作业进行调度时，先进入Q1，排队之后运行一定的时间片，进入Q2,最后进到QN。这样可以保证进程都能执行到。</text></g></g><g id="minder_node46"><g id="node_expander45" style="cursor: pointer;"><path id="kity_path_388" fill="white" stroke="gray" d="M2712.5,1315.5A6,6,0,1,1,2700.5,1315.5A6,6,0,1,1,2712.5,1315.5"></path><path id="kity_path_389" fill="none" stroke="gray" d="M2702,1315.5L2711,1315.5"></path></g><path id="node_outline46" fill="none" stroke="none" d="M2717.5,1304.5h118a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-118a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text46" fill="black"><text id="kity_text_385" text-rendering="inherit" font-size="12" dy=".8em" y="1309.5" x="2722.5">进程线程之间的区别</text></g></g><g id="minder_node47"><g id="node_expander46" style="cursor: pointer;" display="none"><path id="kity_path_396" fill="white" stroke="gray" d="M2880.5,1289.5A6,6,0,1,1,2868.5,1289.5A6,6,0,1,1,2880.5,1289.5"></path><path id="kity_path_397" fill="none" stroke="gray"></path></g><path id="node_outline47" fill="none" stroke="none" d="M2885.5,1278.5h334a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-334a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text47" fill="black"><text id="kity_text_393" text-rendering="inherit" font-size="12" dy=".8em" y="1283.5" x="2890.5">进程是资源调度的基本单位，进程有独立的代码和内存空间。</text></g></g><g id="minder_node48"><g id="node_expander47" style="cursor: pointer;" display="none"><path id="kity_path_404" fill="white" stroke="gray" d="M2880.5,1341.5A6,6,0,1,1,2868.5,1341.5A6,6,0,1,1,2880.5,1341.5"></path><path id="kity_path_405" fill="none" stroke="gray"></path></g><path id="node_outline48" fill="none" stroke="none" d="M2885.5,1330.5h693a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-693a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text48" fill="black"><text id="kity_text_401" text-rendering="inherit" font-size="12" dy=".8em" y="1335.5" x="2890.5">线程是进程内部的单位，每个进程最少有一个线程，叫主线程，在cpu上运行的是线程。线程之间共享堆，独享栈与程序计数器。</text></g></g><g id="minder_node49"><g id="node_expander48" style="cursor: pointer;"><path id="kity_path_412" fill="white" stroke="gray" d="M2712.5,1523.5A6,6,0,1,1,2700.5,1523.5A6,6,0,1,1,2712.5,1523.5"></path><path id="kity_path_413" fill="none" stroke="gray" d="M2702,1523.5L2711,1523.5"></path></g><path id="node_outline49" fill="none" stroke="none" d="M2717.5,1512.5h46a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-46a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text49" fill="black"><text id="kity_text_409" text-rendering="inherit" font-size="12" dy=".8em" y="1517.5" x="2722.5">多线程</text></g></g><g id="minder_node50"><g id="node_expander49" style="cursor: pointer;"><path id="kity_path_420" fill="white" stroke="gray" d="M2808.5,1419.5A6,6,0,1,1,2796.5,1419.5A6,6,0,1,1,2808.5,1419.5"></path><path id="kity_path_421" fill="none" stroke="gray" d="M2798,1419.5L2807,1419.5"></path></g><path id="node_outline50" fill="none" stroke="none" d="M2813.5,1408.5h34a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-34a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text50" fill="black"><text id="kity_text_417" text-rendering="inherit" font-size="12" dy=".8em" y="1413.5" x="2818.5">概念</text></g></g><g id="minder_node51"><g id="node_expander50" style="cursor: pointer;" display="none"><path id="kity_path_428" fill="white" stroke="gray" d="M2892.5,1393.5A6,6,0,1,1,2880.5,1393.5A6,6,0,1,1,2892.5,1393.5"></path><path id="kity_path_429" fill="none" stroke="gray"></path></g><path id="node_outline51" fill="none" stroke="none" d="M2897.5,1382.5h1247a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-1247a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text51" fill="black"><text id="kity_text_425" text-rendering="inherit" font-size="12" dy=".8em" y="1387.5" x="2902.5">现在的cpu都是多核多线程，如4核8线程，有四个物理核心，每个物理核心模拟两个逻辑核心，同一时间可以运行8个线程。那我们编写多线程程序时，因为线程是最小的cpu调度单位，只要写最大线程数是8个就够了，多了也是排队。</text></g></g><g id="minder_node52"><g id="node_expander51" style="cursor: pointer;"><path id="kity_path_436" fill="white" stroke="gray" d="M2808.5,1523.5A6,6,0,1,1,2796.5,1523.5A6,6,0,1,1,2808.5,1523.5"></path><path id="kity_path_437" fill="none" stroke="gray" d="M2798,1523.5L2807,1523.5"></path></g><path id="node_outline52" fill="none" stroke="none" d="M2813.5,1512.5h70a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-70a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text52" fill="black"><text id="kity_text_433" text-rendering="inherit" font-size="12" dy=".8em" y="1517.5" x="2818.5">并发与并行</text></g></g><g id="minder_node53"><g id="node_expander52" style="cursor: pointer;" display="none"><path id="kity_path_444" fill="white" stroke="gray" d="M2892.5,1445.5A6,6,0,1,1,2880.5,1445.5A6,6,0,1,1,2892.5,1445.5"></path><path id="kity_path_445" fill="none" stroke="gray"></path></g><path id="node_outline53" fill="none" stroke="none" d="M2897.5,1434.5h1319a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-1319a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text53" fill="black"><text id="kity_text_441" text-rendering="inherit" font-size="12" dy=".8em" y="1439.5" x="2902.5">但是对于python而言，有GIL，全局解释锁，在进程内部持有这个锁，谁申请到了就可以去调度，所以无论单核还是多核，同一时刻只有一个线程在执行。对于IO密集的操作没关系，因为等待资源调度的事件更长。但是对于计算密集型就影响很大。</text></g></g><g id="minder_node54"><g id="node_expander53" style="cursor: pointer;"><path id="kity_path_452" fill="white" stroke="gray" d="M2928.5,1497.5A6,6,0,1,1,2916.5,1497.5A6,6,0,1,1,2928.5,1497.5"></path><path id="kity_path_453" fill="none" stroke="gray" d="M2918,1497.5L2927,1497.5"></path></g><path id="node_outline54" fill="none" stroke="none" d="M2933.5,1486.5h34a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-34a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text54" fill="black"><text id="kity_text_449" text-rendering="inherit" font-size="12" dy=".8em" y="1491.5" x="2938.5">并发</text></g></g><g id="minder_node55"><g id="node_expander54" style="cursor: pointer;" display="none"><path id="kity_path_460" fill="white" stroke="gray" d="M3012.5,1497.5A6,6,0,1,1,3000.5,1497.5A6,6,0,1,1,3012.5,1497.5"></path><path id="kity_path_461" fill="none" stroke="gray"></path></g><path id="node_outline55" fill="none" stroke="none" d="M3017.5,1486.5h634a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-634a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text55" fill="black"><text id="kity_text_457" text-rendering="inherit" font-size="12" dy=".8em" y="1491.5" x="3022.5">线程之间需要竞争获得执行机会，通过排队、唤醒机制来执行，在宏观角度上，同一时刻好像是都在运行，就是并发。</text></g></g><g id="minder_node56"><g id="node_expander55" style="cursor: pointer;"><path id="kity_path_468" fill="white" stroke="gray" d="M2928.5,1549.5A6,6,0,1,1,2916.5,1549.5A6,6,0,1,1,2928.5,1549.5"></path><path id="kity_path_469" fill="none" stroke="gray" d="M2918,1549.5L2927,1549.5"></path></g><path id="node_outline56" fill="none" stroke="none" d="M2933.5,1538.5h34a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-34a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text56" fill="black"><text id="kity_text_465" text-rendering="inherit" font-size="12" dy=".8em" y="1543.5" x="2938.5">并行</text></g></g><g id="minder_node57"><g id="node_expander56" style="cursor: pointer;" display="none"><path id="kity_path_476" fill="white" stroke="gray" d="M3012.5,1549.5A6,6,0,1,1,3000.5,1549.5A6,6,0,1,1,3012.5,1549.5"></path><path id="kity_path_477" fill="none" stroke="gray"></path></g><path id="node_outline57" fill="none" stroke="none" d="M3017.5,1538.5h409a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-409a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text57" fill="black"><text id="kity_text_473" text-rendering="inherit" font-size="12" dy=".8em" y="1543.5" x="3022.5">因为有多核cpu,同一时刻真正的运行着多个线程，这几个线程就是并行的。</text></g></g><g id="minder_node58"><g id="node_expander57" style="cursor: pointer;"><path id="kity_path_484" fill="white" stroke="gray" d="M2808.5,1627.5A6,6,0,1,1,2796.5,1627.5A6,6,0,1,1,2808.5,1627.5"></path><path id="kity_path_485" fill="none" stroke="gray" d="M2798,1627.5L2807,1627.5"></path></g><path id="node_outline58" fill="none" stroke="none" d="M2813.5,1616.5h154a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-154a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text58" fill="black"><text id="kity_text_481" text-rendering="inherit" font-size="12" dy=".8em" y="1621.5" x="2818.5">阻塞、非阻塞、异步、同步</text></g></g><g id="minder_node59"><g id="node_expander58" style="cursor: pointer;"><path id="kity_path_492" fill="white" stroke="gray" d="M3012.5,1627.5A6,6,0,1,1,3000.5,1627.5A6,6,0,1,1,3012.5,1627.5"></path><path id="kity_path_493" fill="none" stroke="gray" d="M3002,1627.5L3011,1627.5"></path></g><path id="node_outline59" fill="none" stroke="none" d="M3017.5,1616.5h34a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-34a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text59" fill="black"><text id="kity_text_489" text-rendering="inherit" font-size="12" dy=".8em" y="1621.5" x="3022.5">概念</text></g></g><g id="minder_node60"><g id="node_expander59" style="cursor: pointer;" display="none"><path id="kity_path_500" fill="white" stroke="gray" d="M3096.5,1601.5A6,6,0,1,1,3084.5,1601.5A6,6,0,1,1,3096.5,1601.5"></path><path id="kity_path_501" fill="none" stroke="gray"></path></g><path id="node_outline60" fill="none" stroke="none" d="M3101.5,1590.5h490a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-490a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text60" fill="black"><text id="kity_text_497" text-rendering="inherit" font-size="12" dy=".8em" y="1595.5" x="3106.5">线程访问的数据在就绪之前，是否需要等待，需要等待就是阻塞，不需要等待就是非阻塞。</text></g></g><g id="minder_node61"><g id="node_expander60" style="cursor: pointer;" display="none"><path id="kity_path_508" fill="white" stroke="gray" d="M3096.5,1653.5A6,6,0,1,1,3084.5,1653.5A6,6,0,1,1,3096.5,1653.5"></path><path id="kity_path_509" fill="none" stroke="gray"></path></g><path id="node_outline61" fill="none" stroke="none" d="M3101.5,1642.5h874a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-874a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text61" fill="black"><text id="kity_text_505" text-rendering="inherit" font-size="12" dy=".8em" y="1647.5" x="3106.5">访问数据的方式。在请求资源时，同步需要主动读写资源，读写过程中会阻塞。异步只需要等待操作系统完成的通知，也不用主动读写数据，有操作系统内核完成。</text></g></g><g id="minder_node63"><g id="node_expander62" style="cursor: pointer;"><path id="kity_path_524" fill="white" stroke="gray" d="M2312.5,746.5A6,6,0,1,1,2300.5,746.5A6,6,0,1,1,2312.5,746.5"></path><path id="kity_path_525" fill="none" stroke="gray" d="M2302,746.5L2311,746.5"></path></g><path id="node_outline63" fill="rgb(238, 243, 246)" stroke="rgb(115, 161, 191)" d="M2234.5,733.5h62a3,3,0,0,1,3,3v20a3,3,0,0,1,-3,3h-62a3,3,0,0,1,-3,-3v-20a3,3,0,0,1,3,-3z" stroke-width="1"></path><g id="node_text63" fill="black"><text id="kity_text_521" text-rendering="inherit" font-size="14" dy=".8em" y="739.5" x="2251.5">协程</text></g></g><g id="minder_node64"><g id="node_expander63" style="cursor: pointer;" display="none"><path id="kity_path_532" fill="white" stroke="gray" d="M2203.5,694.5A6,6,0,1,1,2191.5,694.5A6,6,0,1,1,2203.5,694.5"></path><path id="kity_path_533" fill="none" stroke="gray"></path></g><path id="node_outline64" fill="none" stroke="none" d="M1322.5,683.5h864a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-864a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text64" fill="black"><text id="kity_text_529" text-rendering="inherit" font-size="12" dy=".8em" y="688.5" x="1327.5">在执行函数A时，可以随时中断，执行B，之后可以继续返回执行A。属于函数调用，在一个线程内完成，不需要线程的切换，执行效率高。适用于IO密集型任务。</text></g></g><g id="minder_node65"><g id="node_expander64" style="cursor: pointer;" display="none"><path id="kity_path_540" fill="white" stroke="gray" d="M2203.5,746.5A6,6,0,1,1,2191.5,746.5A6,6,0,1,1,2203.5,746.5"></path><path id="kity_path_541" fill="none" stroke="gray"></path></g><path id="node_outline65" fill="none" stroke="none" d="M2149.5,735.5h37a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-37a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text65" fill="black"><text id="kity_text_537" text-rendering="inherit" font-size="12" dy=".8em" y="740.5" x="2154.5">yield</text></g></g><g id="minder_node66"><g id="node_expander65" style="cursor: pointer;" display="none"><path id="kity_path_548" fill="white" stroke="gray" d="M2203.5,798.5A6,6,0,1,1,2191.5,798.5A6,6,0,1,1,2203.5,798.5"></path><path id="kity_path_549" fill="none" stroke="gray"></path></g><path id="node_outline66" fill="none" stroke="none" d="M2106.5,787.5h80a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-80a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text66" fill="black"><text id="kity_text_545" text-rendering="inherit" font-size="12" dy=".8em" y="792.5" x="2111.5">async await</text></g></g><g id="minder_node67"><g id="node_expander66" style="cursor: pointer;" display="none"><path id="kity_path_556" fill="white" stroke="gray" d="M2175.5,860.5A6,6,0,1,1,2163.5,860.5A6,6,0,1,1,2175.5,860.5"></path><path id="kity_path_557" fill="none" stroke="gray"></path></g><path id="node_outline67" fill="none" stroke="none" d="M1737.5,849.5h421a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-421a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text67" fill="black"><text id="kity_text_553" text-rendering="inherit" font-size="12" dy=".8em" y="854.5" x="1742.5">概念:操作系统负责内存的分配与回收，地址转换，将逻辑地址转为物理地址。</text></g></g><g id="minder_node71"><g id="node_expander70" style="cursor: pointer;"><path id="kity_path_588" fill="white" stroke="gray" d="M2175.5,1146.5A6,6,0,1,1,2163.5,1146.5A6,6,0,1,1,2175.5,1146.5"></path><path id="kity_path_589" fill="none" stroke="gray" d="M2165,1146.5L2174,1146.5"></path></g><path id="node_outline71" fill="none" stroke="none" d="M2124.5,1135.5h34a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-34a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text71" fill="black"><text id="kity_text_585" text-rendering="inherit" font-size="12" dy=".8em" y="1140.5" x="2129.5">机制</text></g></g><g id="minder_node72"><g id="node_expander71" style="cursor: pointer;"><path id="kity_path_596" fill="white" stroke="gray" d="M2091.5,912.5A6,6,0,1,1,2079.5,912.5A6,6,0,1,1,2091.5,912.5"></path><path id="kity_path_597" fill="none" stroke="gray" d="M2081,912.5L2090,912.5"></path></g><path id="node_outline72" fill="none" stroke="none" d="M1968.5,901.5h106a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-106a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text72" fill="black"><text id="kity_text_593" text-rendering="inherit" font-size="12" dy=".8em" y="906.5" x="1973.5">连续内存分配管理</text></g></g><g id="minder_node73"><g id="node_expander72" style="cursor: pointer;"><path id="kity_path_604" fill="white" stroke="gray" d="M1935.5,912.5A6,6,0,1,1,1923.5,912.5A6,6,0,1,1,1935.5,912.5"></path><path id="kity_path_605" fill="none" stroke="gray" d="M1925,912.5L1934,912.5"></path></g><path id="node_outline73" fill="none" stroke="none" d="M1860.5,901.5h58a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-58a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text73" fill="black"><text id="kity_text_601" text-rendering="inherit" font-size="12" dy=".8em" y="906.5" x="1865.5">块式管理</text></g></g><g id="minder_node74"><g id="node_expander73" style="cursor: pointer;"><path id="kity_path_612" fill="white" stroke="gray" d="M2091.5,1088.5A6,6,0,1,1,2079.5,1088.5A6,6,0,1,1,2091.5,1088.5"></path><path id="kity_path_613" fill="none" stroke="gray" d="M2081,1088.5L2090,1088.5"></path></g><path id="node_outline74" fill="none" stroke="none" d="M1956.5,1077.5h118a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-118a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text74" fill="black"><text id="kity_text_609" text-rendering="inherit" font-size="12" dy=".8em" y="1082.5" x="1961.5">非连续内存分配管理</text></g></g><g id="minder_node75"><g id="node_expander74" style="cursor: pointer;" display="none"><path id="kity_path_620" fill="white" stroke="gray" d="M1827.5,912.5A6,6,0,1,1,1815.5,912.5A6,6,0,1,1,1827.5,912.5"></path><path id="kity_path_621" fill="none" stroke="gray"></path></g><path id="node_outline75" fill="none" stroke="none" d="M1308.5,901.5h502a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-502a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text75" fill="black"><text id="kity_text_617" text-rendering="inherit" font-size="12" dy=".8em" y="906.5" x="1313.5">将内存分为固定大小的块，每个块中有一个进程，属于早期的管理方式。这样会产生很多碎片</text></g></g><g id="minder_node76"><g id="node_expander75" style="cursor: pointer;"><path id="kity_path_628" fill="white" stroke="gray" d="M1923.5,1004.5A6,6,0,1,1,1911.5,1004.5A6,6,0,1,1,1923.5,1004.5"></path><path id="kity_path_629" fill="none" stroke="gray" d="M1913,1004.5L1922,1004.5"></path></g><path id="node_outline76" fill="none" stroke="none" d="M1848.5,993.5h58a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-58a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text76" fill="black"><text id="kity_text_625" text-rendering="inherit" font-size="12" dy=".8em" y="998.5" x="1853.5">页式管理</text></g></g><g id="minder_node77"><g id="node_expander76" style="cursor: pointer;"><path id="kity_path_636" fill="white" stroke="gray" d="M1923.5,1121.5A6,6,0,1,1,1911.5,1121.5A6,6,0,1,1,1923.5,1121.5"></path><path id="kity_path_637" fill="none" stroke="gray" d="M1913,1121.5L1922,1121.5"></path></g><path id="node_outline77" fill="none" stroke="none" d="M1848.5,1110.5h58a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-58a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text77" fill="black"><text id="kity_text_633" text-rendering="inherit" font-size="12" dy=".8em" y="1115.5" x="1853.5">段式管理</text></g></g><g id="minder_node78"><g id="node_expander77" style="cursor: pointer;"><path id="kity_path_644" fill="white" stroke="gray" d="M1923.5,1173.5A6,6,0,1,1,1911.5,1173.5A6,6,0,1,1,1923.5,1173.5"></path><path id="kity_path_645" fill="none" stroke="gray" d="M1913,1173.5L1922,1173.5"></path></g><path id="node_outline78" fill="none" stroke="none" d="M1836.5,1162.5h70a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-70a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text78" fill="black"><text id="kity_text_641" text-rendering="inherit" font-size="12" dy=".8em" y="1167.5" x="1841.5">段页式管理</text></g></g><g id="minder_node79"><g id="node_expander78" style="cursor: pointer;" display="none"><path id="kity_path_652" fill="white" stroke="gray" d="M1815.5,965.5A6,6,0,1,1,1803.5,965.5A6,6,0,1,1,1815.5,965.5"></path><path id="kity_path_653" fill="none" stroke="gray"></path></g><path id="node_outline79" fill="none" stroke="none" d="M1176.5,954.5h622a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-622a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text79" fill="black"><text id="kity_text_649" text-rendering="inherit" font-size="12" dy=".8em" y="959.5" x="1181.5">把内存分成大小相等的页，页比块要小的多，内存的利用率要高，碎片少。通过页表的来对应逻辑地址和物理地址。</text></g></g><g id="minder_node80"><g id="node_expander79" style="cursor: pointer;" display="none"><path id="kity_path_660" fill="white" stroke="gray" d="M1815.5,1121.5A6,6,0,1,1,1803.5,1121.5A6,6,0,1,1,1815.5,1121.5"></path><path id="kity_path_661" fill="none" stroke="gray"></path></g><path id="node_outline80" fill="none" stroke="none" d="M672.5,1110.5h1126a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-1126a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text80" fill="black"><text id="kity_text_657" text-rendering="inherit" font-size="12" dy=".8em" y="1115.5" x="677.5">页式管理在实际代码中没有意义，段式管理把内存分成一段一段的，段比页大，但是段有实际的意义，是一段逻辑信息。如主程序段，数据段，栈段等。使用段表来对应逻辑地址和物理地址。段的大小是不固定的</text></g></g><g id="minder_node81"><g id="node_expander80" style="cursor: pointer;" display="none"><path id="kity_path_668" fill="white" stroke="gray" d="M1803.5,1173.5A6,6,0,1,1,1791.5,1173.5A6,6,0,1,1,1803.5,1173.5"></path><path id="kity_path_669" fill="none" stroke="gray"></path></g><path id="node_outline81" fill="none" stroke="none" d="M1320.5,1162.5h466a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-466a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text81" fill="black"><text id="kity_text_665" text-rendering="inherit" font-size="12" dy=".8em" y="1167.5" x="1325.5">结合以上两者，先将内存分成有意义的段，再把段分成页，这样既有意义，碎片又小。</text></g></g><g id="minder_node82"><g id="node_expander81" style="cursor: pointer;"><path id="kity_path_676" fill="white" stroke="gray" d="M1815.5,1043.5A6,6,0,1,1,1803.5,1043.5A6,6,0,1,1,1815.5,1043.5"></path><path id="kity_path_677" fill="none" stroke="gray" d="M1805,1043.5L1814,1043.5"></path></g><path id="node_outline82" fill="none" stroke="none" d="M1704.5,1032.5h94a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-94a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text82" fill="black"><text id="kity_text_673" text-rendering="inherit" font-size="12" dy=".8em" y="1037.5" x="1709.5">快表与多级页表</text></g></g><g id="minder_node83"><g id="node_expander82" style="cursor: pointer;" display="none"><path id="kity_path_684" fill="white" stroke="gray" d="M1671.5,1017.5A6,6,0,1,1,1659.5,1017.5A6,6,0,1,1,1671.5,1017.5"></path><path id="kity_path_685" fill="none" stroke="gray"></path></g><path id="node_outline83" fill="none" stroke="none" d="M435.5,1006.5h1219a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-1219a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text83" fill="black"><text id="kity_text_681" text-rendering="inherit" font-size="12" dy=".8em" y="1011.5" x="440.5">快表是为了解决逻辑地址到物理地址之间的转换速度，在原有页表的基础上增加了快表，快表也就是一个高速缓冲存储器cache.其内容时页表的部分内容。快表在主存上，快表在cache中，单独的寄存器中。访问速度比内存要快</text></g></g><g id="minder_node84"><g id="node_expander83" style="cursor: pointer;" display="none"><path id="kity_path_692" fill="white" stroke="gray" d="M1671.5,1069.5A6,6,0,1,1,1659.5,1069.5A6,6,0,1,1,1671.5,1069.5"></path><path id="kity_path_693" fill="none" stroke="gray"></path></g><path id="node_outline84" fill="none" stroke="none" d="M780.5,1058.5h874a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-874a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text84" fill="black"><text id="kity_text_689" text-rendering="inherit" font-size="12" dy=".8em" y="1063.5" x="785.5">多级页表是为了防止一次把所有的页表都加载进内存，占用的内存太多，所以进行分级，一级页表的表项是二级页表的地址，二级页表的表项才是内存的物理地址。</text></g></g><g id="minder_node85"><g id="node_expander84" style="cursor: pointer;"><path id="kity_path_700" fill="white" stroke="gray" d="M2091.5,1380.5A6,6,0,1,1,2079.5,1380.5A6,6,0,1,1,2091.5,1380.5"></path><path id="kity_path_701" fill="none" stroke="gray" d="M2081,1380.5L2090,1380.5"></path></g><path id="node_outline85" fill="none" stroke="none" d="M2016.5,1369.5h58a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-58a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text85" fill="black"><text id="kity_text_697" text-rendering="inherit" font-size="12" dy=".8em" y="1374.5" x="2021.5">虚拟内存</text></g></g><g id="minder_node86"><g id="node_expander85" style="cursor: pointer;" display="none"><path id="kity_path_708" fill="white" stroke="gray" d="M1983.5,1224.5A6,6,0,1,1,1971.5,1224.5A6,6,0,1,1,1983.5,1224.5"></path><path id="kity_path_709" fill="none" stroke="gray"></path></g><path id="node_outline86" fill="none" stroke="none" d="M1356.5,1213.5h610a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-610a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text86" fill="black"><text id="kity_text_705" text-rendering="inherit" font-size="12" dy=".8em" y="1218.5" x="1361.5">如果一个程序需要用的内存要大于实际内存，可以根据局部性原理，只把部分加载到内存中，其他使用时再加载。</text></g></g><g id="minder_node87"><g id="node_expander86" style="cursor: pointer;"><path id="kity_path_716" fill="white" stroke="gray" d="M1983.5,1302.5A6,6,0,1,1,1971.5,1302.5A6,6,0,1,1,1983.5,1302.5"></path><path id="kity_path_717" fill="none" stroke="gray" d="M1973,1302.5L1982,1302.5"></path></g><path id="node_outline87" fill="none" stroke="none" d="M1896.5,1291.5h70a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-70a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text87" fill="black"><text id="kity_text_713" text-rendering="inherit" font-size="12" dy=".8em" y="1296.5" x="1901.5">局部性原理</text></g></g><g id="minder_node88"><g id="node_expander87" style="cursor: pointer;"><path id="kity_path_724" fill="white" stroke="gray" d="M1863.5,1276.5A6,6,0,1,1,1851.5,1276.5A6,6,0,1,1,1863.5,1276.5"></path><path id="kity_path_725" fill="none" stroke="gray" d="M1853,1276.5L1862,1276.5"></path></g><path id="node_outline88" fill="none" stroke="none" d="M1776.5,1265.5h70a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-70a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text88" fill="black"><text id="kity_text_721" text-rendering="inherit" font-size="12" dy=".8em" y="1270.5" x="1781.5">空间局部性</text></g></g><g id="minder_node89"><g id="node_expander88" style="cursor: pointer;" display="none"><path id="kity_path_732" fill="white" stroke="gray" d="M1743.5,1276.5A6,6,0,1,1,1731.5,1276.5A6,6,0,1,1,1743.5,1276.5"></path><path id="kity_path_733" fill="none" stroke="gray"></path></g><path id="node_outline89" fill="none" stroke="none" d="M1092.5,1265.5h634a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-634a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text89" fill="black"><text id="kity_text_729" text-rendering="inherit" font-size="12" dy=".8em" y="1270.5" x="1097.5">一旦访问了某个存储单元，在不久的将来，该存储单元的附近也会被访问。因为指令通常都是顺序执行，顺序存放的。</text></g></g><g id="minder_node90"><g id="node_expander89" style="cursor: pointer;"><path id="kity_path_740" fill="white" stroke="gray" d="M1863.5,1328.5A6,6,0,1,1,1851.5,1328.5A6,6,0,1,1,1863.5,1328.5"></path><path id="kity_path_741" fill="none" stroke="gray" d="M1853,1328.5L1862,1328.5"></path></g><path id="node_outline90" fill="none" stroke="none" d="M1776.5,1317.5h70a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-70a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text90" fill="black"><text id="kity_text_737" text-rendering="inherit" font-size="12" dy=".8em" y="1322.5" x="1781.5">时间局部性</text></g></g><g id="minder_node91"><g id="node_expander90" style="cursor: pointer;" display="none"><path id="kity_path_748" fill="white" stroke="gray" d="M1743.5,1328.5A6,6,0,1,1,1731.5,1328.5A6,6,0,1,1,1743.5,1328.5"></path><path id="kity_path_749" fill="none" stroke="gray"></path></g><path id="node_outline91" fill="none" stroke="none" d="M1176.5,1317.5h550a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-550a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text91" fill="black"><text id="kity_text_745" text-rendering="inherit" font-size="12" dy=".8em" y="1322.5" x="1181.5">如果一条执行执行了，不久就会再次执行。数据访问过一次，不久会再次访问。因为有很多循环操作。</text></g></g><g id="minder_node92"><g id="node_expander91" style="cursor: pointer;"><path id="kity_path_756" fill="white" stroke="gray" d="M1983.5,1536.5A6,6,0,1,1,1971.5,1536.5A6,6,0,1,1,1983.5,1536.5"></path><path id="kity_path_757" fill="none" stroke="gray" d="M1973,1536.5L1982,1536.5"></path></g><path id="node_outline92" fill="none" stroke="none" d="M1908.5,1525.5h58a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-58a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text92" fill="black"><text id="kity_text_753" text-rendering="inherit" font-size="12" dy=".8em" y="1530.5" x="1913.5">虚拟内存</text></g></g><g id="minder_node93"><g id="node_expander92" style="cursor: pointer;" display="none"><path id="kity_path_764" fill="white" stroke="gray" d="M1875.5,1380.5A6,6,0,1,1,1863.5,1380.5A6,6,0,1,1,1875.5,1380.5"></path><path id="kity_path_765" fill="none" stroke="gray"></path></g><path id="node_outline93" fill="none" stroke="none" d="M684.5,1369.5h1174a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-1174a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text93" fill="black"><text id="kity_text_761" text-rendering="inherit" font-size="12" dy=".8em" y="1374.5" x="689.5">基于局部性原理，程序运行时，只将一部分加载到内存中，其他的放在硬盘中，当需要的时候在加载到内存中。当访问的信息不再内存上，由系统来调入信息到内存继续执行。这样就可以使用比内存大很多的虚拟存储器。</text></g></g><g id="minder_node94"><g id="node_expander93" style="cursor: pointer;"><path id="kity_path_772" fill="white" stroke="gray" d="M1875.5,1484.5A6,6,0,1,1,1863.5,1484.5A6,6,0,1,1,1875.5,1484.5"></path><path id="kity_path_773" fill="none" stroke="gray" d="M1865,1484.5L1874,1484.5"></path></g><path id="node_outline94" fill="none" stroke="none" d="M1620.5,1473.5h238a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-238a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text94" fill="black"><text id="kity_text_769" text-rendering="inherit" font-size="12" dy=".8em" y="1478.5" x="1625.5">虚拟内存时建立在非连续分配的基础上的。</text></g></g><g id="minder_node95"><g id="node_expander94" style="cursor: pointer;"><path id="kity_path_780" fill="white" stroke="gray" d="M1587.5,1432.5A6,6,0,1,1,1575.5,1432.5A6,6,0,1,1,1587.5,1432.5"></path><path id="kity_path_781" fill="none" stroke="gray" d="M1577,1432.5L1586,1432.5"></path></g><path id="node_outline95" fill="none" stroke="none" d="M1464.5,1421.5h106a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-106a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text95" fill="black"><text id="kity_text_777" text-rendering="inherit" font-size="12" dy=".8em" y="1426.5" x="1469.5">请求分页存储管理</text></g></g><g id="minder_node96"><g id="node_expander95" style="cursor: pointer;" display="none"><path id="kity_path_788" fill="white" stroke="gray" d="M1431.5,1432.5A6,6,0,1,1,1419.5,1432.5A6,6,0,1,1,1431.5,1432.5"></path><path id="kity_path_789" fill="none" stroke="gray"></path></g><path id="node_outline96" fill="none" stroke="none" d="M25.5,1421.5h1389a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-1389a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text96" fill="black"><text id="kity_text_785" text-rendering="inherit" font-size="12" dy=".8em" y="1426.5" x="30.5">建立在分页管理的基础上，最常见的一种。在作业开始之前，加载部分也即可运行，当作业运行过程中发现所访问的页面不在内存，操作系统会采用页面置换算法将需要的页面置换会内存。将不用的置换会外存。缺页会发生缺页中断，cpu知道缺页中断就会置换</text></g></g><g id="minder_node97"><g id="node_expander96" style="cursor: pointer;"><path id="kity_path_796" fill="white" stroke="gray" d="M1587.5,1484.5A6,6,0,1,1,1575.5,1484.5A6,6,0,1,1,1587.5,1484.5"></path><path id="kity_path_797" fill="none" stroke="gray" d="M1577,1484.5L1586,1484.5"></path></g><path id="node_outline97" fill="none" stroke="none" d="M1464.5,1473.5h106a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-106a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text97" fill="black"><text id="kity_text_793" text-rendering="inherit" font-size="12" dy=".8em" y="1478.5" x="1469.5">请求分段存储管理</text></g></g><g id="minder_node98"><g id="node_expander97" style="cursor: pointer;" display="none"><path id="kity_path_804" fill="white" stroke="gray" d="M1431.5,1484.5A6,6,0,1,1,1419.5,1484.5A6,6,0,1,1,1431.5,1484.5"></path><path id="kity_path_805" fill="none" stroke="gray"></path></g><path id="node_outline98" fill="none" stroke="none" d="M1020.5,1473.5h394a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-394a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text98" fill="black"><text id="kity_text_801" text-rendering="inherit" font-size="12" dy=".8em" y="1478.5" x="1025.5">建立在分段管理的基础上。增加了请求调段的功能。具体方式和上面相似</text></g></g><g id="minder_node99"><g id="node_expander98" style="cursor: pointer;" display="none"><path id="kity_path_812" fill="white" stroke="gray" d="M1587.5,1536.5A6,6,0,1,1,1575.5,1536.5A6,6,0,1,1,1587.5,1536.5"></path><path id="kity_path_813" fill="none" stroke="gray"></path></g><path id="node_outline99" fill="none" stroke="none" d="M1452.5,1525.5h118a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-118a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text99" fill="black"><text id="kity_text_809" text-rendering="inherit" font-size="12" dy=".8em" y="1530.5" x="1457.5">请求段页式存储管理</text></g></g><g id="minder_node100"><g id="node_expander99" style="cursor: pointer;"><path id="kity_path_820" fill="white" stroke="gray" d="M1875.5,1692.5A6,6,0,1,1,1863.5,1692.5A6,6,0,1,1,1875.5,1692.5"></path><path id="kity_path_821" fill="none" stroke="gray" d="M1865,1692.5L1874,1692.5"></path></g><path id="node_outline100" fill="none" stroke="none" d="M1800.5,1681.5h58a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-58a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text100" fill="black"><text id="kity_text_817" text-rendering="inherit" font-size="12" dy=".8em" y="1686.5" x="1805.5">置换算法</text></g></g><g id="minder_node101"><g id="node_expander100" style="cursor: pointer;"><path id="kity_path_828" fill="white" stroke="gray" d="M1767.5,1588.5A6,6,0,1,1,1755.5,1588.5A6,6,0,1,1,1767.5,1588.5"></path><path id="kity_path_829" fill="none" stroke="gray" d="M1757,1588.5L1766,1588.5"></path></g><path id="node_outline101" fill="none" stroke="none" d="M1645.5,1577.5h105a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-105a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text101" fill="black"><text id="kity_text_825" text-rendering="inherit" font-size="12" dy=".8em" y="1582.5" x="1650.5">最佳置换算法OPT</text></g></g><g id="minder_node102"><g id="node_expander101" style="cursor: pointer;" display="none"><path id="kity_path_836" fill="white" stroke="gray" d="M1612.5,1588.5A6,6,0,1,1,1600.5,1588.5A6,6,0,1,1,1612.5,1588.5"></path><path id="kity_path_837" fill="none" stroke="gray"></path></g><path id="node_outline102" fill="none" stroke="none" d="M1033.5,1577.5h562a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-562a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text102" fill="black"><text id="kity_text_833" text-rendering="inherit" font-size="12" dy=".8em" y="1582.5" x="1038.5">是不存在的算法，理想中的算法，作为一个衡量标准，定义是置换出的页面，在很长时间内不再使用了。</text></g></g><g id="minder_node103"><g id="node_expander102" style="cursor: pointer;"><path id="kity_path_844" fill="white" stroke="gray" d="M1767.5,1640.5A6,6,0,1,1,1755.5,1640.5A6,6,0,1,1,1767.5,1640.5"></path><path id="kity_path_845" fill="none" stroke="gray" d="M1757,1640.5L1766,1640.5"></path></g><path id="node_outline103" fill="none" stroke="none" d="M1692.5,1629.5h58a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-58a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text103" fill="black"><text id="kity_text_841" text-rendering="inherit" font-size="12" dy=".8em" y="1634.5" x="1697.5">先进先出</text></g></g><g id="minder_node104"><g id="node_expander103" style="cursor: pointer;" display="none"><path id="kity_path_852" fill="white" stroke="gray" d="M1659.5,1640.5A6,6,0,1,1,1647.5,1640.5A6,6,0,1,1,1659.5,1640.5"></path><path id="kity_path_853" fill="none" stroke="gray"></path></g><path id="node_outline104" fill="none" stroke="none" d="M1524.5,1629.5h118a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-118a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text104" fill="black"><text id="kity_text_849" text-rendering="inherit" font-size="12" dy=".8em" y="1634.5" x="1529.5">淘汰最先进入的页面</text></g></g><g id="minder_node105"><g id="node_expander104" style="cursor: pointer;" display="none"><path id="kity_path_860" fill="white" stroke="gray" d="M1767.5,1692.5A6,6,0,1,1,1755.5,1692.5A6,6,0,1,1,1767.5,1692.5"></path><path id="kity_path_861" fill="none" stroke="gray"></path></g><path id="node_outline105" fill="none" stroke="none" d="M1659.5,1681.5h91a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-91a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text105" fill="black"><text id="kity_text_857" text-rendering="inherit" font-size="12" dy=".8em" y="1686.5" x="1664.5">最近未使用LRU</text></g></g><g id="minder_node106"><g id="node_expander105" style="cursor: pointer;"><path id="kity_path_868" fill="white" stroke="gray" d="M1767.5,1744.5A6,6,0,1,1,1755.5,1744.5A6,6,0,1,1,1767.5,1744.5"></path><path id="kity_path_869" fill="none" stroke="gray" d="M1757,1744.5L1766,1744.5"></path></g><path id="node_outline106" fill="none" stroke="none" d="M1668.5,1733.5h82a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-82a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text106" fill="black"><text id="kity_text_865" text-rendering="inherit" font-size="12" dy=".8em" y="1738.5" x="1673.5">时钟置换算法</text></g></g><g id="minder_node107"><g id="node_expander106" style="cursor: pointer;" display="none"><path id="kity_path_876" fill="white" stroke="gray" d="M1767.5,1796.5A6,6,0,1,1,1755.5,1796.5A6,6,0,1,1,1767.5,1796.5"></path><path id="kity_path_877" fill="none" stroke="gray"></path></g><path id="node_outline107" fill="none" stroke="none" d="M1668.5,1785.5h82a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-82a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text107" fill="black"><text id="kity_text_873" text-rendering="inherit" font-size="12" dy=".8em" y="1790.5" x="1673.5">最少使用算法</text></g></g><g id="minder_node108"><g id="node_expander107" style="cursor: pointer;" display="none"><path id="kity_path_884" fill="white" stroke="gray" d="M1635.5,1744.5A6,6,0,1,1,1623.5,1744.5A6,6,0,1,1,1635.5,1744.5"></path><path id="kity_path_885" fill="none" stroke="gray"></path></g><path id="node_outline108" fill="none" stroke="none" d="M945.5,1733.5h673a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-673a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text108" fill="black"><text id="kity_text_881" text-rendering="inherit" font-size="12" dy=".8em" y="1738.5" x="950.5">每个页都关联一个附加位，作为使用位。初次加载或者再次使用都置为1，当需要置换时就遍历，遇到1就置为0遇到0就置换出</text></g></g></g></g></svg>